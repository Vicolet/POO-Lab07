@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0
skinparam linetype polyline

remove *Test*
remove Main

' Additions
Calculator "1"-u->"1" State: state
JCalculator "0..1" --> "1" State : possÃ¨de
JCalculator "0..1" --> "1" Operator : utilise
State "0..1" --> "1" "Stack" : valeurs
Operator "1" --> "1" State


' REMOVE
' - state: State

' ENDSTATIC
class Backspace {
	# performOperation(state: State): void
}

class DecimalPoint {
	# performOperation(state: State): void
}

class Inverse {
	# unaryOperation(value: double, state: State): double
	+ execute(state: State): void
}

abstract class BinaryOperator {
	# unaryOperation(value: double, state: State): double
	# {abstract}binaryOperation(left: double, right: double): double
}

abstract class Operator {
	+ {abstract}execute(state: State): void
}

class ClearError {
	+ execute(state: State): void
}

class TestUtils {
	+ {static} getComponentByName(container: Container, name: String): Component
	+ {static} getButtonByLabel(container: Container, label: String): JButton
}

class Main {
	+ {static} main(args: String): void
}

class Add {
	# binaryOperation(left: double, right: double): double
}

class Stack {
	- top: Node
	- size: int
	+ push(data: T): void
	+ pop(): T
	+ isEmpty(): boolean
	+ size(): int
	+ toString(): String
	+ toArray(): Object[]
	+ iterator(): Iterator<T>
}


class Stack$Node {
	~ data: T
	~ next: Node
}

class ClearAll {
	+ execute(state: State): void
}

abstract class DefaultOperator {
	+ execute(state: State): void
	# {abstract}performOperation(state: State): void
}

class StackTest {
	- stack: Stack<Integer>
	+ setUp(): void
	+ testPushAndToString(): void
	+ testPop(): void
	+ testToArray(): void
	+ testIterator(): void
	+ testIsEmpty(): void
	+ testSize(): void
	+ testPopFromEmptyStack(): void
}


class StateTest {
	
	+ setUp(): void
	+ testStackOperations(): void
	+ testCurrentValue(): void
	+ testMemoryOperations(): void
	+ testErrorHandling(): void
	+ testClearAll(): void
	+ testFlags(): void
	+ testStackToArray(): void
	+ testCurrentValueAsString(): void
}


class Divide {
	# binaryOperation(left: double, right: double): double
	+ execute(state: State): void
}

class Negate {
	# unaryOperation(value: double, state: State): double
}

class MemoryStore {
	+ execute(state: State): void
}

class State {
	- stack: Stack<Double>
	- currentValue: Double
	- memory: Double
	- errorMessage: String
	- isDecimalMode: boolean
	- isNewEntry: boolean
	- isResultDisplayed: boolean
	- currentValueString: String
	+ getCurrentValue(): Double
	+ setCurrentValue(value: Double): void
	+ getCurrentValueAsString(): String
	+ setCurrentValueString(value: String): void
	+ pushCurrentValue(): void
	+ pop(): Double
	+ getStack(): Stack<Double>
	+ getStackArray(): String[]
	+ clearAll(): void
	+ storeInMemory(): void
	+ recallFromMemory(): Double
	+ setError(message: String): void
	+ getError(): String
	+ clearError(): void
	+ formatDouble(value: Double): String
	+ isDecimalMode(): boolean
	+ setDecimalMode(decimalMode: boolean): void
	+ isNewEntry(): boolean
	+ setNewEntry(newEntry: boolean): void
	+ isResultDisplayed(): boolean
	+ setResultDisplayed(resultDisplayed: boolean): void
}


class Number {
	- digit: int
	+ performOperation(state: State): void
}


class MemoryRecall {
	+ execute(state: State): void
}

class Calculator {
	
	+ run(): void
	- processInput(input: String): void
	- displayState(): void
	+ {static} main(args: String[]): void
}


class Calculator$OperatorList {
	+ {static} createOperator(input: String, state: State): Operator
}

class Multiply {
	# binaryOperation(left: double, right: double): double
}

class CalculatorTest {
	- calculator: Calculator
	- outputStream: ByteArrayOutputStream
	+ setUp(): void
	- simulateInput(input: String): void
	- getConsoleOutput(): String
	+ testAddition(): void
	+ testSubtraction(): void
	+ testMultiplication(): void
	+ testDivision(): void
	+ testSquareRoot(): void
	+ testSquare(): void
	+ testNegate(): void
	+ testEnterPushesValueToStack(): void
	+ testMemoryStoreAndRecall(): void
	+ testClearAll(): void
	+ testDivisionByZero(): void
	+ testInvalidInput(): void
	+ testBackspace(): void
}


class Sqrt {
	# unaryOperation(value: double, state: State): double
}

class JCalculator {
	
	- jNumber: JTextField
	- jStack: JList<String>
	- constraints: GridBagConstraints
	- setupDisplay(): void
	- setupButtons(): void
	- setupStackDisplay(): void
	- addOperatorButton(name: String, x: int, y: int, color: Color, \n\t operator: Operator): void
	- update(): void
}


class Square {
	# unaryOperation(value: double, state: State): double
}

abstract class UnaryOperator {
	# performOperation(state: State): void
	# {abstract}unaryOperation(value: double, state: State): double
}

class JCalculatorTest {
	- calculator: JCalculator
	- displayField: JTextField
	- stackDisplay: JList<String>
	+ setUp(): void
	- getStackContents(): String[]
	- clickButton(label: String): void
	+ testAdd(): void
	+ testBackspace(): void
	+ testClearAll(): void
	+ testClearError(): void
	+ testDecimalPoint(): void
	+ testDivide(): void
	+ testEnter(): void
	+ testInverse(): void
	+ testMemoryRecallAndStore(): void
	+ testMultiply(): void
	+ testNegate(): void
	+ testNumber(): void
	+ testSqrt(): void
	+ testSquare(): void
	+ testSubtract(): void
	+ testAddWithMultipleEntries(): void
	+ testDecimalPointMultipleTimes(): void
	+ testBackspaceWithDecimal(): void
	+ testDivideByZero(): void
	+ testEnterPushesValue(): void
	+ testComplexExpression(): void
	+ testClearErrorResetsOnlyDisplay(): void
	+ testMemoryStoreAndRecall(): void
	+ testNegateOnNegativeNumber(): void
	+ testSquareAndSquareRoot(): void
	+ testMultipleStackOperations(): void
	+ testDecimalPointAfterEnter(): void
	+ testChainedOperations(): void
}


class Enter {
	# performOperation(state: State): void
}

class Subtract {
	# binaryOperation(left: double, right: double): double
}



DefaultOperator <|-- Backspace
DefaultOperator <|-- DecimalPoint
UnaryOperator <|-- Inverse
UnaryOperator <|-- BinaryOperator
Operator <|-- ClearError
BinaryOperator <|-- Add
Iterable <|.. Stack
Stack +-- Stack$Node
ClearError <|-- ClearAll
Operator <|-- DefaultOperator
BinaryOperator <|-- Divide
UnaryOperator <|-- Negate
Operator <|-- MemoryStore
DefaultOperator <|-- Number
Operator <|-- MemoryRecall
Calculator +-- Calculator$OperatorList
BinaryOperator <|-- Multiply
UnaryOperator <|-- Sqrt
JFrame <|-- JCalculator
UnaryOperator <|-- Square
DefaultOperator <|-- UnaryOperator
DefaultOperator <|-- Enter
BinaryOperator <|-- Subtract
@enduml
